###############################################################################
# Copyright (c) 2023 Ericsson
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License 2.0
# which accompanies this distribution, and is available at
# https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
###############################################################################
#!/usr/bin/env python3
"""This is a program to de-noise the traces generated by openvsx, mostly the server"""
import argparse
import re

import progressbar

widgets = [
    " [",
    progressbar.Timer(format="elapsed time: %s"),
    "] ",
    progressbar.Bar("#"),
    " (",
    progressbar.ETA(),
    ") ",
]
TICKS = 360
event_start = re.compile(r"\{\"ts\":")
parser = argparse.ArgumentParser()
parser.add_argument("input", help="input file", type=str)
parser.add_argument("output", help="output file", type=str)
args = parser.parse_args()
with open(args.input, mode="r", encoding="utf-8") as input_file:
    with open(args.output, mode="w", encoding="utf-8") as output_file:
        events = []
        output_file.write("[")
        PRE_LINES = input_file.readlines()
        lines = []
        for line in PRE_LINES:
            lines += line.split('""')
        tick_line = len(lines)
        progress_bar = progressbar.ProgressBar(
            maxval=tick_line, widgets=widgets
        ).start()
        for pos, line in enumerate(lines):
            progress_bar.update(pos)
            length = len(line)
            event = re.search(event_start, line)
            while event is not None:
                bracket_count = 1
                if event is not None:
                    index_start = event.start()
                    index = event.end()
                    for char in line[index:]:
                        index += 1
                        if char == "{":
                            bracket_count += 1
                        elif char == "}":
                            bracket_count -= 1
                        if bracket_count == 0:
                            event_line = line[index_start:index]
                            events.append(event_line.replace("â€¥", ":"))
                            break
                    line = line[index:]
                    event = re.search(event_start, line)
        output_file.write(",\n".join(events))
        output_file.write("]\n")
print(f"\nWrote to {args.output}")
